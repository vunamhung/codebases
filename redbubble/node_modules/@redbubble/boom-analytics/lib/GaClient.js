'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var GaClient = function () {
  function GaClient(account, reactGa, globalWindow, options) {
    _classCallCheck(this, GaClient);

    this.window = globalWindow;
    this.reactGa = reactGa;
    this.reactGa.initialize(account, _extends({}, options, {
      titleCase: false
    }));
  }

  _createClass(GaClient, [{
    key: 'require',
    value: function require(pluginName) {
      this.reactGa.ga('require', pluginName);
    }
  }, {
    key: 'setOptions',
    value: function setOptions(options) {
      this.reactGa.set(options);
    }
  }, {
    key: 'logEvent',
    value: function logEvent(e) {
      this.reactGa.event(e);
    }
  }, {
    key: 'logTiming',
    value: function logTiming(fieldObject) {
      this.reactGa.ga('send', _extends({ hitType: 'timing' }, fieldObject));
    }
  }, {
    key: 'logPageView',
    value: function logPageView(page, fieldObject) {
      if (page) {
        var payload = _extends({}, fieldObject, {
          hitType: 'pageview',
          page: page
        });
        this.reactGa.send(payload);
      } else {
        this.reactGa.pageview(this.window.location.pathname);
      }
    }
  }, {
    key: 'logOutboundLink',
    value: function logOutboundLink(label, callback) {
      this.reactGa.outboundLink({ label: label }, callback);
    }
  }, {
    key: 'logEventWithCallback',
    value: function logEventWithCallback(e, callback) {
      var fieldObject = {
        eventCategory: e.category,
        eventAction: e.action
      };

      if (e.label) {
        fieldObject.eventLabel = e.label;
      }

      this.reactGa.ga('send', _extends({
        hitType: 'event',
        hitCallback: callback
      }, fieldObject));
    }
  }, {
    key: 'setEnhancedEcommerceAddProduct',
    value: function setEnhancedEcommerceAddProduct(data) {
      this.reactGa.ga('ec:addProduct', data);
      this.reactGa.ga('ec:setAction', 'add');
    }
  }, {
    key: 'setEnhancedEcommerceProductDetail',
    value: function setEnhancedEcommerceProductDetail(data) {
      this.reactGa.ga('ec:addProduct', data);
      this.reactGa.ga('ec:setAction', 'detail');
    }
  }, {
    key: 'legacyPageView',
    value: function legacyPageView() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      this.reactGa.ga('send', 'pageview', options);
    }
  }, {
    key: 'addImpression',
    value: function addImpression(data) {
      this.reactGa.ga('ec:addImpression', data);
    }
  }]);

  return GaClient;
}();

exports.default = GaClient;