'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.resumeGASending = exports.pauseGASending = exports.setDimensions = exports.validateAndSetDimensions = exports.addImpression = exports.setGAClientOptions = exports.logTiming = exports.logEvent = exports.logPageView = exports.RESUME = exports.PAUSE = exports.VALIDATE_AND_SET_DIMENSIONS = exports.SET_GA_CUSTOM_DIMENSIONS = exports.ADD_IMPRESSION = exports.SET_GA_CLIENT_OPTIONS = exports.LOG_TIMING = exports.LOG_PAGEVIEW = exports.LOG_EVENT = undefined;

var _gaClientSettings = require('@redbubble/ga-client-settings');

var _gaClientSettings2 = _interopRequireDefault(_gaClientSettings);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var LOG_EVENT = exports.LOG_EVENT = 'LOG_EVENT';
var LOG_PAGEVIEW = exports.LOG_PAGEVIEW = 'LOG_PAGEVIEW';
var LOG_TIMING = exports.LOG_TIMING = 'LOG_TIMING';
var SET_GA_CLIENT_OPTIONS = exports.SET_GA_CLIENT_OPTIONS = 'SET_GA_CLIENT_OPTIONS';
var ADD_IMPRESSION = exports.ADD_IMPRESSION = 'ADD_IMPRESSION';
var SET_GA_CUSTOM_DIMENSIONS = exports.SET_GA_CUSTOM_DIMENSIONS = 'SET_GA_CUSTOM_DIMENSIONS';
var VALIDATE_AND_SET_DIMENSIONS = exports.VALIDATE_AND_SET_DIMENSIONS = 'VALIDATE_AND_SET_DIMENSIONS';
var PAUSE = exports.PAUSE = 'PAUSE';
var RESUME = exports.RESUME = 'RESUME';

var logPageView = exports.logPageView = function logPageView(page, dimensions, stub) {
  var settings = void 0;
  if (dimensions) {
    var client = stub || new _gaClientSettings2.default({ dimensions: dimensions });
    settings = client.buildDimensions();
  }

  return {
    type: LOG_PAGEVIEW,
    page: page,
    dimensions: settings
  };
};

var logEvent = exports.logEvent = function logEvent(meta) {
  return {
    type: LOG_EVENT,
    meta: meta
  };
};

var logTiming = exports.logTiming = function logTiming(data) {
  return {
    type: LOG_TIMING,
    data: data
  };
};

var setGAClientOptions = exports.setGAClientOptions = function setGAClientOptions(options) {
  return {
    type: SET_GA_CLIENT_OPTIONS,
    options: options
  };
};

var addImpression = exports.addImpression = function addImpression(data) {
  return {
    type: ADD_IMPRESSION,
    data: data
  };
};

var validateAndSetDimensions = exports.validateAndSetDimensions = function validateAndSetDimensions(settings, stub) {
  var client = stub || new _gaClientSettings2.default(settings);
  client.validateDimensions(settings);

  return {
    type: VALIDATE_AND_SET_DIMENSIONS,
    dimensions: client.buildDimensions()
  };
};

var setDimensions = exports.setDimensions = function setDimensions(dimensions, stub) {
  var client = stub || new _gaClientSettings2.default({ dimensions: dimensions });

  return {
    type: SET_GA_CUSTOM_DIMENSIONS,
    dimensions: client.buildDimensions()
  };
};

var pauseGASending = exports.pauseGASending = function pauseGASending() {
  return {
    type: PAUSE
  };
};

var resumeGASending = exports.resumeGASending = function resumeGASending() {
  return {
    type: RESUME
  };
};