'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _ClientConfig = require('./components/ClientConfig');

Object.defineProperty(exports, 'ClientConfig', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_ClientConfig).default;
  }
});
exports.default = createConfigGetter;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Factory for creating config getters for a set of values
function createConfigGetter(values, _ref) {
  var isDev = _ref.isDev,
      isClient = _ref.isClient;

  if (!values && isClient) {
    if (typeof window !== 'undefined' && _typeof(window.__CLIENT_CONFIG__) === 'object') {
      values = window.__CLIENT_CONFIG__;
    } else {
      values = {};
    }
  }

  function configGet(path) {
    var parts = typeof path === 'string' ? path.split('.') : path;

    if (parts.length === 0) {
      throw new Error('You must provide the path to the configuration value you would like to consume.');
    }

    var result = values;

    for (var i = 0; i < parts.length; i += 1) {
      if (result === undefined || parts.length === 1 && result[parts[i]] === undefined) {
        var errorMessage = 'Failed to resolve configuration value at "' + parts.join('.') + '".';

        if (isClient && isDev) {
          throw new Error(errorMessage + ' We have noticed that you are trying to access this configuration value from the client bundle (i.e. code that will be executed in a browser). For configuration values to be exposed to the client bundle you must ensure that the path is added to the client configuration filter in the project configuration values file.');
        }

        throw new Error(errorMessage);
      }

      result = result[parts[i]];
    }

    return result;
  }

  configGet.VALUES = values;

  return configGet;
}