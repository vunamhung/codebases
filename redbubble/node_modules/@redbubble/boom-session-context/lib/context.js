'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SessionContextProvider = exports.SessionContextConsumer = exports.useSessionContext = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _reactHooks = require('@apollo/react-hooks');

var _graphqlTag = require('graphql-tag');

var _graphqlTag2 = _interopRequireDefault(_graphqlTag);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const query = _graphqlTag2.default`
  query {
    sessionContext {
      features
      isBot
    }
  }
`;

const SessionContext = _react2.default.createContext({});

const useSessionContext = exports.useSessionContext = () => {
  return (0, _react.useContext)(SessionContext);
};

const SessionContextConsumer = exports.SessionContextConsumer = SessionContext.Consumer;

const SessionContextProvider = exports.SessionContextProvider = ({ isServer, children }) => {
  const { data, loading } = (0, _reactHooks.useQuery)(query, { fetchPolicy: isServer ? 'cache-first' : 'cache-only' });

  return _react2.default.createElement(
    SessionContext.Provider,
    { value: _extends({}, data ? data.sessionContext : {}, { loading }) },
    children
  );
};

SessionContextProvider.propTypes = {
  isServer: _propTypes2.default.bool.isRequired,
  children: _propTypes2.default.node.isRequired
};