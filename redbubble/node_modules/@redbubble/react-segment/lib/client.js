"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.createEcommercePayload = void 0;

var _get = _interopRequireDefault(require("lodash/get"));

var _snakeCase = _interopRequireDefault(require("lodash/snakeCase"));

var _validate = require("./validate");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var snakeKeys = function snakeKeys(obj) {
  return Object.entries(obj).reduce(function (snaked, _ref) {
    var _ref2 = _slicedToArray(_ref, 2),
        key = _ref2[0],
        value = _ref2[1];

    return _objectSpread(_objectSpread({}, snaked), {}, _defineProperty({}, (0, _snakeCase["default"])(key), value));
  }, {});
};

var userTraits = function userTraits(_ref3) {
  var locale = _ref3.locale,
      currency = _ref3.currency,
      country = _ref3.country;
  return {
    locale: locale,
    currency: currency,
    country: country
  };
};

var imagePreview = function imagePreview(inventoryItem) {
  if (inventoryItem.imageUrl) return {
    url: inventoryItem.imageUrl
  };
  return (0, _get["default"])(inventoryItem, 'previewSet.previews', []).find(function (_ref4) {
    var previewTypeId = _ref4.previewTypeId;
    return previewTypeId === _validate.PRODUCT_CLOSE_PREVIEW;
  });
};

var getArtist = function getArtist(work) {
  return work.artistName || work.artist && (work.artist.username || work.artist.name) || '';
};
/**
 * Creates a segment ecommerce spec compliant payload for product added/removed
 * The additional fields attached to this payload are locale, context, currency, artist_name.
 * The segment ecommerce spec can be found [here]{@link https://segment.com/docs/connections/spec/ecommerce/v2/}
 * @param {*} inventoryItem object representing a cart line item / POLI
 * @param {*} work the work related to the prouct being tracked
 * @param {*} eventInfo the object containing the locale and the context of this acion
 */


var createEcommercePayload = function createEcommercePayload(_ref5) {
  var inventoryItem = _ref5.inventoryItem,
      work = _ref5.work,
      eventInfo = _ref5.eventInfo;
  return {
    category: (0, _get["default"])(inventoryItem, 'description'),
    coupon: '',
    cart_id: '',
    brand: 'Redbubble',
    name: (0, _get["default"])(work, 'title'),
    artist_name: getArtist(work),
    sku: (0, _get["default"])(inventoryItem, 'id'),
    locale: (0, _get["default"])(eventInfo, 'locale'),
    context: (0, _get["default"])(eventInfo, 'context'),
    url: (0, _get["default"])(inventoryItem, 'productPageUrl'),
    price: (0, _get["default"])(inventoryItem, 'price.amount'),
    variant: (0, _get["default"])(inventoryItem, 'blankItemId'),
    quantity: (0, _get["default"])(inventoryItem, 'quantity', 1),
    currency: (0, _get["default"])(inventoryItem, 'price.currency'),
    image_url: (0, _get["default"])(imagePreview(inventoryItem), 'url'),
    product_id: (0, _get["default"])(inventoryItem, 'marketingProductTypeId'),
    work_id: (0, _get["default"])(work, 'id')
  };
};

exports.createEcommercePayload = createEcommercePayload;

var createClient = function createClient(base, enabled, onError, extend) {
  var warnIfInvalid = (0, _validate.createInvalidHandler)(onError);
  return _objectSpread(_objectSpread(_objectSpread({}, new Proxy(base, {
    get: function get() {
      if (enabled) {
        return Reflect.get.apply(Reflect, arguments);
      }

      return function () {};
    }
  })), extend), {}, {
    trackProductAdded: function trackProductAdded(args) {
      warnIfInvalid('trackProductAdded', args);
      base.track('Product Added', createEcommercePayload(args));
    },
    trackProductRemoved: function trackProductRemoved(args) {
      warnIfInvalid('trackProductRemoved', args);
      base.track('Product Removed', createEcommercePayload(args));
    },
    trackProductViewed: function trackProductViewed(args) {
      warnIfInvalid('trackProductViewed', args);
      var userInfo = args.userInfo,
          inventoryItem = args.inventoryItem;
      var inventoryItemPreview = imagePreview(inventoryItem);
      var attributes = (0, _get["default"])(inventoryItem, 'attributes', []).reduce(function (acc, attribute) {
        return _objectSpread(_objectSpread({}, acc), {}, _defineProperty({}, (0, _snakeCase["default"])(attribute.name), attribute.value));
      }, {});
      base.track('Product Viewed', snakeKeys(_objectSpread(_objectSpread({}, userTraits(userInfo)), {}, {
        inventoryItemId: (0, _get["default"])(inventoryItem, 'id'),
        category: (0, _get["default"])(inventoryItem, 'description'),
        productId: (0, _get["default"])(inventoryItem, 'marketingProductTypeId'),
        artistName: (0, _get["default"])(inventoryItem, 'work.artist.username', ''),
        url: (0, _get["default"])(inventoryItem, 'productPageUrl', ''),
        imageUrl: (0, _get["default"])(inventoryItemPreview, 'url', ''),
        title: (0, _get["default"])(inventoryItem, 'work.title', ''),
        price: (0, _get["default"])(inventoryItem, 'price.amount', ''),
        workId: (0, _get["default"])(inventoryItem, 'workId', null),
        blankItemId: (0, _get["default"])(inventoryItem, 'blankItemId', '')
      }, attributes)));
    },
    page: function page(pageName, args) {
      warnIfInvalid('page', args);
      base.page(pageName, args);
    }
  });
};

var _default = createClient;
exports["default"] = _default;