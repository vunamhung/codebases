"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createInvalidHandler = exports.PRODUCT_CLOSE_PREVIEW = void 0;

var _yup = require("yup");

var PRODUCT_CLOSE_PREVIEW = 'product_close';
exports.PRODUCT_CLOSE_PREVIEW = PRODUCT_CLOSE_PREVIEW;
var previewSetValidator = (0, _yup.object)({
  previews: (0, _yup.array)().test({
    name: 'validPreviews',
    exclusive: true,
    message: "At least one preview must have a previewTypeId of ".concat(PRODUCT_CLOSE_PREVIEW, " and a url"),
    test: function test(previews) {
      var previewClose = previews.find(function (_ref) {
        var previewTypeId = _ref.previewTypeId;
        return previewTypeId === PRODUCT_CLOSE_PREVIEW;
      });
      return !!(previewClose && previewClose.url);
    }
  })
}).required();
var ecommerceSpec = (0, _yup.object)({
  inventoryItem: (0, _yup.object)({
    id: (0, _yup.string)().required(),
    cartId: (0, _yup.string)().notRequired(),
    price: (0, _yup.object)({
      amount: (0, _yup.number)().required(),
      currency: (0, _yup.string)().required()
    }).required(),
    previewSet: previewSetValidator,
    blankItemId: (0, _yup.string)().required(),
    productTypeId: (0, _yup.string)().required(),
    productPageUrl: (0, _yup.string)().required(),
    marketingProductTypeId: (0, _yup.string)().required()
  }).required(),
  imageUrl: (0, _yup.string)().nullable(),
  work: (0, _yup.object)({
    title: (0, _yup.string)().nullable(),
    id: (0, _yup.string)().required()
  }),
  eventInfo: (0, _yup.object)({
    locale: (0, _yup.string)().required(),
    context: (0, _yup.string)().required()
  })
});
var validators = {
  trackProductAdded: ecommerceSpec,
  trackProductRemoved: ecommerceSpec,
  trackProductViewed: (0, _yup.object)({
    inventoryItem: (0, _yup.object)({
      id: (0, _yup.string)().required(),
      price: (0, _yup.object)({
        amount: (0, _yup.number)().required(),
        currency: (0, _yup.string)().required()
      }).required(),
      previewSet: previewSetValidator,
      work: (0, _yup.object)({
        title: (0, _yup.string)().nullable(),
        artist: (0, _yup.object)({
          username: (0, _yup.string)().required()
        }).required()
      }).required(),
      productPageUrl: (0, _yup.string)().required(),
      workId: (0, _yup.number)().required(),
      attributes: (0, _yup.array)((0, _yup.object)({
        name: (0, _yup.string)().required(),
        value: (0, _yup.string)().required()
      }).required())
    }).required(),
    userInfo: (0, _yup.object)({
      locale: (0, _yup.string)().required(),
      currency: (0, _yup.string)().required(),
      country: (0, _yup.string)().required()
    }).required()
  }),
  page: (0, _yup.object)({
    locale: (0, _yup.string)().required(),
    currency: (0, _yup.string)().required(),
    country: (0, _yup.string)().required(),

    /*
      * Known keys
      *
      * Any keys other than these will trigger a warning (but will not prevent
      * the page from being tracked).
      *
      * This ensures that we don't bloat segment with a wide variety of
      * similar-but-different keys for common data points.
      *
      * If a new key is required, it should be added as a known key here
      *
      */
    sku: (0, _yup.mixed)(),
    product_id: (0, _yup.mixed)(),
    marketing_product_type_id: (0, _yup.mixed)()
  }).noUnknown()
};

var createInvalidHandler = function createInvalidHandler(onError) {
  return function (schemaName, obj) {
    try {
      validators[schemaName].validateSync(obj);
    } catch (e) {
      if (typeof onError === 'function') onError(e, "Segment \"".concat(schemaName, "\" is not valid"));
    }
  };
};

exports.createInvalidHandler = createInvalidHandler;