import React from 'react';
import PropTypes from 'prop-types';
import { defineMessages } from 'react-intl';
import emojiFlags from 'emoji-flags';
import Box from '../../../../Box';
import Divider from '../../../../Divider';
import Menu, { MenuSection, MenuLink, MenuItem } from '../../../../Menu';
import Text from '../../../../Text';
import TextLink from '../../../../TextLink';
import Stack from '../../../../Stack';
import ChevronRightIcon from '../../../../Icons/ChevronRightBig';
import styles from './styles.scss';

const EmojiFlag = ({ country }) => {
  const flag = emojiFlags.countryCode(country);

  if (!flag) return null;

  return <Text type="display2">{ flag.emoji }</Text>;
};

const messages = defineMessages({
  matureContentVisible: 'Mature content: Visible',
  matureContentHidden: 'Mature content: Hidden',
});

const currencyLabel = (currency) => {
  if (currency === 'USD') return 'USD$';
  if (currency === 'CAD') return 'CAD$';
  if (currency === 'AUD') return 'AUD$';
  if (currency === 'EURO') return '€';
  if (currency === 'GBP') return '£';
  return currency;
};

const languageLabel = (locale) => {
  if (locale === 'en') return 'English';
  if (locale === 'de') return 'Deutsch';
  if (locale === 'fr') return 'Français';
  if (locale === 'es') return 'Español';
  if (locale === 'it') return 'Italiano';
  return locale;
};

export default function UserSettings(props) {
  const {
    userInfo, returnUrl, onToggleMatureContent, intl, baseUrl,
  } = props;

  if (!(userInfo && Object.keys(userInfo).length)) return null;

  const { country, currency, locale } = userInfo || {};

  return (
    <React.Fragment>
      <Box className={styles.mobileSettings}>
        <Menu padded>
          <MenuSection title="User Settings" hideTitle divided>
            <Divider />
            <MenuLink
              iconBefore={country && <EmojiFlag country={country} />}
              iconAfter={<ChevronRightIcon />}
              href={`${baseUrl}/settings/show?return_to=${encodeURIComponent(returnUrl || '/')}`}
              rel="nofollow"
            >
              { currencyLabel(currency)} - {languageLabel(locale) }
            </MenuLink>
            <Divider />
            <MenuItem
              iconAfter={<ChevronRightIcon />}
              onClick={(e) => {
                e.preventDefault();
                onToggleMatureContent(e);
              }}
            >
              {intl.formatMessage(
                /* eslint-disable max-len */
                userInfo.showMatureContent ? messages.matureContentVisible : messages.matureContentHidden,
              )}
            </MenuItem>
          </MenuSection>
        </Menu>
      </Box>
      <Box className={styles.desktopSettings}>
        <Stack spacing="l" direction="horizontal">
          <Stack spacing="s" direction="horizontal" alignItems="center">
            { country && <EmojiFlag country={country} /> }
            <TextLink
              href={`${baseUrl}/settings/show?return_to=${encodeURIComponent(returnUrl || '/')}`}
              rel="nofollow"
            >
              <span>
                {currencyLabel(currency)} - {languageLabel(locale)}
              </span>
            </TextLink>
          </Stack>
          <TextLink
            href="#"
            onClick={(e) => {
              e.preventDefault();
              onToggleMatureContent(e);
            }}
          >
            <Text type="display5">
              {intl.formatMessage(
                /* eslint-disable max-len */
                userInfo.showMatureContent ? messages.matureContentVisible : messages.matureContentHidden,
              )}
            </Text>
          </TextLink>
        </Stack>
      </Box>
    </React.Fragment>
  );
}

UserSettings.propTypes = {
  // eslint-disable-next-line react/no-typos
  intl: PropTypes.shape({}).isRequired,
  userInfo: PropTypes.shape({
    country: PropTypes.string,
    currency: PropTypes.string,
    locale: PropTypes.string,
    showMatureContent: PropTypes.bool,
  }),
  returnUrl: PropTypes.string,
  onToggleMatureContent: PropTypes.func,
  baseUrl: PropTypes.string,
};

UserSettings.defaultProps = {
  userInfo: {},
  returnUrl: '',
  onToggleMatureContent: () => { },
  baseUrl: '/en',
};

UserSettings.displayName = 'UserSettings';
