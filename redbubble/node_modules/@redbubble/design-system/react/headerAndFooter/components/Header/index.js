import React, { Component, useContext } from 'react';
import get from 'lodash/get';
import PropTypes from 'prop-types';
import { defineMessages } from 'react-intl';
import DesignSystemContext from '../../../contexts/DesignSystemContext';
import {
  CREATIVE_ADVENTURES_DARK,
  FIND_YOUR_THING_DARK,
} from '../../../themes/ids';
import Drawer from '../../../Drawer';
import Button from '../../../Button';
import Tooltip from '../../../Tooltip';
import Logo from '../../../Logo';
import Box from '../../../Box';
import PageSection from '../../../PageSection';
import HeartLargeIcon from '../../../Icons/HeartLarge';
import PromoMessage from '../PromoMessage';
import HeaderLinks from '../HeaderLinks';
import ArtistMetrics from '../ArtistMetrics';
import UserMenu from '../UserMenu';
import CartCountBadge from '../CartCountBadge';
import { MobileProductNav, StaticMobileProductNav, itemsPropShape } from '../../../ProductNav';
import * as constants from '../../../constants';
import Modal from '../../../Modal';
import CartIcon from '../../../Icons/Cart';
import HamburgerIcon from '../../../Icons/Hamburger';
import SearchIcon from '../../../Icons/Search';
import TypeaheadMobile from '../Typeahead/components/mobile';
import TypeaheadDesktop from '../Typeahead/components/desktop';
import { doSearch } from '../../lib/doSearch';
import styles from './style.scss';

const messages = defineMessages({
  viewCart: 'View Cart',
  cartLabel: 'Cart',
  loginSignup: 'Log In or Sign Up',
  lists: 'Your Lists',
  listsLabel: 'Lists',
  accessibleTitle: 'Products',
  searchButtonLabel: 'Search',
  searchLabel: 'Search',
  sellArt: 'Sell your art',
  login: 'Login',
  signup: 'Signup',
});

const LogoWrapper = () => {
  const { theme } = useContext(DesignSystemContext);
  const isDarkTheme = theme.id === CREATIVE_ADVENTURES_DARK || theme.id === FIND_YOUR_THING_DARK;

  return (
    <Logo colored={!isDarkTheme} contrast={isDarkTheme} />
  );
};

class Header extends Component {
  constructor(props) {
    super(props);

    this.state = {
      isServer: true,
      isSearchBoxOpen: false,
    };

    this.onCartClick = this.onCartClick.bind(this);
    this.openSearchBox = this.openSearchBox.bind(this);
    this.closeSearchBox = this.closeSearchBox.bind(this);
    this.handleLegacyGoToFavoritesClick = this.handleLegacyGoToFavoritesClick.bind(this);
  }

  onCartClick(e) {
    const { logEvent, onCartClick } = this.props;

    if (onCartClick && typeof onCartClick === 'function') onCartClick(e);

    const analytics = {
      category: 'Go To Cart',
      action: 'Click',
      label: 'header',
    };
    logEvent({ analytics });
  }

  // DEPRECATED, pass through `onHeartClick` instead
  handleLegacyGoToFavoritesClick(e) {
    const { goToFavorites } = this.props;
    if (typeof goToFavorites !== 'function') {
      return;
    }

    e.preventDefault();
    goToFavorites();
  }

  openSearchBox() {
    this.setState({ isSearchBoxOpen: true });
  }

  closeSearchBox() {
    this.setState({ isSearchBoxOpen: false });
  }

  componentDidMount() {
    // eslint-disable-next-line react/no-did-mount-set-state
    this.setState({
      isServer: false,
    });
  }

  render() {
    const {
      intl,
      profile,
      userInfo,
      userAccount,
      cart,
      searchTerm,
      doLogin,
      doSignup,
      baseUrl,
      globalNavigation,
      searchProductContext,
      onHeartClick,
      goToFavorites,
      logEvent,
      typeaheadDisableEventLogging,
      disableSearch,
    } = this.props;
    const {
      isServer,
      isSearchBoxOpen,
    } = this.state;

    const { isLoggedIn, locale, avatar, username } = userInfo || {};
    const { metrics, isArtist, onboardedAt } = userAccount || {};
    const { itemsCount } = cart || {};
    const baseUrlWithLocale = locale === 'en' ? baseUrl : `${baseUrl}/${locale || 'en'}`;
    const cartItemsCount = itemsCount || 0;

    const desktop = profile === constants.DESKTOP;

    const heartLink = isLoggedIn
      ? `${baseUrlWithLocale}/lists?ref=header`
      : `${baseUrlWithLocale}/signup?ref=header_heart`;

    let extraHeartProps = {};
    if (goToFavorites && !onHeartClick) {
      extraHeartProps = { onClick: this.handleLegacyGoToFavoritesClick };
    }
    if (!goToFavorites && onHeartClick) {
      extraHeartProps = { onClick: onHeartClick };
    }

    const typeaheadSearch = (term, productContext = {}) => {
      doSearch(
        term,
        productContext,
        baseUrlWithLocale,
        this.props.doSearch,
      );
    };

    return (
      <>
        <Box className={styles.headerWrapper}>

          <Box style={{ position: 'relative' }}>
            <PageSection
              backgroundColor="var(--ds-color-background-ui)"
            >
              <Box
                element="header"
                display="flex"
                justifyContent="space-between"
                alignItems="center"
                padding={desktop ? 1 : 0.5}
                paddingRight={desktop ? 2 : 0.5}
                paddingLeft={desktop ? 2 : 0.5}
                className={styles.header}
              >
                {
                  !desktop ? (
                    <>
                      <Drawer
                        accessibleTitle={intl.formatMessage(messages.accessibleTitle)}
                        trigger={({ onClick }) => (
                          <Button
                            circle
                            onClick={onClick}
                            aria-label={intl.formatMessage(messages.accessibleTitle)}
                            iconBefore={<HamburgerIcon />}
                            data-testid="ds-header-hamburger-action"
                          />
                        )}
                        from={constants.LEFT}
                        fit
                      >
                        <MobileProductNav
                          intl={intl}
                          userInfo={userInfo}
                          userAccount={userAccount}
                          doLogin={doLogin}
                          doSignup={doSignup}
                          baseUrl={baseUrlWithLocale}
                          items={globalNavigation}
                          logEvent={logEvent}
                        />
                      </Drawer>
                      {
                        disableSearch ? (
                          <Box aria-hidden className={styles.hidden}>
                            <Button circle disabled />
                          </Box>
                        ) : (
                          <Box>
                            <Modal
                              accessibleTitle={intl.formatMessage(messages.searchLabel)}
                              hideCloseButton
                              trigger={({ onClick }) => (
                                <Button
                                  circle
                                  iconBefore={<SearchIcon size={constants.MEDIUM} />}
                                  aria-label={intl.formatMessage(messages.searchButtonLabel)}
                                  onClick={(e) => {
                                    e.target.blur();
                                    onClick(e);
                                  }}
                                />
                              )}
                            >
                              {
                                ({ close }) => (
                                  <TypeaheadMobile
                                    locale={locale}
                                    logEvent={logEvent}
                                    baseUrl={baseUrl}
                                    intl={intl}
                                    onSearchClose={close}
                                    term={searchTerm}
                                    productContextIaCode={get(searchProductContext, 'id', null)}
                                    productContextLabel={get(searchProductContext, 'label', null)}
                                    doSearch={typeaheadSearch}
                                    disableEventLogging={typeaheadDisableEventLogging}
                                  />
                                )
                              }
                            </Modal>
                          </Box>
                        )
                      }
                    </>
                  ) : (
                    <Box
                      flex="1"
                      marginRight="m"
                      display="flex"
                      alignItems="center"
                    >
                      <HeaderLinks
                        isDesktop={desktop}
                        isLoggedIn={isLoggedIn}
                        baseUrl={baseUrlWithLocale}
                        intl={intl}
                        doLogin={doLogin}
                        doSignup={doSignup}
                      />
                      {
                        !disableSearch && (
                          <Box flex="1" marginRight="l" style={{ order: -1 }}>
                            <TypeaheadDesktop
                              locale={locale}
                              baseUrl={baseUrlWithLocale}
                              intl={intl}
                              logEvent={logEvent}
                              term={searchTerm}
                              doSearch={typeaheadSearch}
                              productContextIaCode={get(searchProductContext, 'id', null)}
                              productContextLabel={get(searchProductContext, 'label', null)}
                              onSearchOpen={this.openSearchBox}
                              onSearchClose={this.closeSearchBox}
                              disableEventLogging={typeaheadDisableEventLogging}
                            />
                          </Box>
                        )
                      }
                    </Box>
                  )
                }
                <Box
                  flex={!desktop ? '1' : ''}
                  marginRight={desktop ? 1.25 : 0}
                  display="flex"
                  justifyContent="center"
                  alignItems="center"
                  style={{ order: desktop && '-1' }}
                >
                  <a
                    style={{ width: desktop ? '180px' : '133px', display: 'block' }}
                    href={`${baseUrlWithLocale}/`}
                  >
                    <LogoWrapper />
                  </a>
                </Box>

                <Box
                  display="flex"
                  alignItems="center"
                >
                  {
                    (desktop && !!isLoggedIn) && (
                      <Box marginRight="xxs">
                        <UserMenu
                          profile={profile}
                          intl={intl}
                          baseUrl={baseUrlWithLocale}
                          avatar={avatar}
                          username={username}
                          isArtist={isArtist}
                          locale={locale}
                          onboardedAt={onboardedAt}
                        />
                      </Box>
                    )
                  }
                  {
                    (desktop && !!metrics) && (
                      <Box marginRight="xxs">
                        <ArtistMetrics
                          baseUrl={baseUrlWithLocale}
                          intl={intl}
                          {...metrics}
                        />
                      </Box>
                    )
                  }
                  <Box marginRight={desktop ? 0.25 : 0}>
                    <Tooltip
                      trigger={triggerProps => (
                        <Button
                          circle
                          size={desktop ? constants.LARGE : constants.MEDIUM}
                          href={heartLink}
                          title={intl.formatMessage(messages.lists)}
                          rel="nofollow"
                          data-testid="ds-header-lists-link"
                          {...triggerProps}
                          {...extraHeartProps}
                        >
                          <HeartLargeIcon />
                        </Button>
                      )}
                      accessibleTitle={intl.formatMessage(messages.lists)}
                    >
                      {intl.formatMessage(messages.listsLabel)}
                    </Tooltip>
                  </Box>
                  <Box style={{ position: 'relative' }}>
                    <Tooltip
                      trigger={triggerProps => (
                        <>
                          {
                            (!isServer && !!cartItemsCount) && (
                              <CartCountBadge
                                count={cartItemsCount}
                              />
                            )
                          }

                          <Button
                            circle
                            size={desktop ? constants.LARGE : constants.MEDIUM}
                            onClick={this.onCartClick}
                            rel="nofollow"
                            href={`${baseUrlWithLocale}/cart`}
                            title={intl.formatMessage(messages.viewCart)}
                            {...triggerProps}
                            data-testid="ds-header-cart-link"
                          >
                            <CartIcon />
                          </Button>
                        </>
                      )}
                      accessibleTitle={intl.formatMessage(messages.viewCart)}
                    >
                      {intl.formatMessage(messages.cartLabel)}
                    </Tooltip>
                  </Box>
                </Box>
              </Box>
            </PageSection>
          </Box>
          {
            !desktop && (
              <StaticMobileProductNav
                items={globalNavigation}
                intl={intl}
                userInfo={userInfo}
                logEvent={logEvent}
              />
            )
          }
        </Box>
        {isSearchBoxOpen && <Box className={styles.searchOpen} data-testid="typeaheadOverlay" />}
      </>
    );
  }
}


Header.displayName = 'Header';

Header.propTypes = {
  // eslint-disable-next-line react/no-typos
  intl: PropTypes.shape({}).isRequired,
  profile: PropTypes.oneOf([constants.DESKTOP, constants.MOBILE]),
  banners: PropTypes.arrayOf(PropTypes.shape({
    message: PropTypes.string,
  })),
  userInfo: PropTypes.shape({
    avatar: PropTypes.string,
    username: PropTypes.string,
    locale: PropTypes.string,
    country: PropTypes.string,
    isLoggedIn: PropTypes.bool,
  }),
  userAccount: PropTypes.shape({
    isArtist: PropTypes.bool,
  }),
  cart: PropTypes.shape({
    id: PropTypes.string,
    busy: PropTypes.bool,
    itemsCount: PropTypes.number,
  }),
  searchTerm: PropTypes.string,
  doSearch: PropTypes.func,
  doLogin: PropTypes.func,
  doSignup: PropTypes.func,
  onHeartClick: PropTypes.func,
  logEvent: PropTypes.func,
  baseUrl: PropTypes.string,
  globalNavigation: itemsPropShape.isRequired,
  searchProductContext: PropTypes.shape({
    id: PropTypes.string,
    label: PropTypes.string,
  }),
  typeaheadDisableEventLogging: PropTypes.bool,
  onCartClick: PropTypes.func,
  disableSearch: PropTypes.bool,
};

Header.defaultProps = {
  profile: constants.DESKTOP,
  banners: [],
  userInfo: {},
  userAccount: null,
  cart: {},
  searchTerm: '',
  logEvent: () => {},
  doSearch: null,
  doLogin: null,
  doSignup: null,
  onHeartClick: null,
  baseUrl: '',
  searchProductContext: null,
  typeaheadDisableEventLogging: true,
  onCartClick: null,
  disableSearch: false,
};

export { PromoMessage };
export default Header;
