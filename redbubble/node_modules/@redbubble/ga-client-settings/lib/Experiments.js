'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Experiments = function () {
  function Experiments(experiments, enrolments) {
    _classCallCheck(this, Experiments);

    this.data = {
      experiments: experiments,
      enrolments: enrolments
    };
  }

  _createClass(Experiments, [{
    key: 'validate',
    value: function validate() {
      if (this.hasExperiments() && !this.data.experiments[0].experiment) {
        return new Error('required experiment is missing');
      } else if (this.hasExperiments() && !this.data.experiments[0].group) {
        return new Error('required group is missing');
      }
      return null;
    }
  }, {
    key: 'toDimensions',
    value: function toDimensions() {
      if (this.hasEnrolments()) {
        return {
          dimension4: this.enrolments(),
          dimension5: 'none'
        };
      }

      if (this.hasExperiments()) {
        return {
          dimension4: this.experimentID(),
          dimension5: this.experimentVariant()
        };
      }

      return null;
    }
  }, {
    key: 'hasEnrolments',
    value: function hasEnrolments() {
      return Array.isArray(this.data.enrolments) && this.data.enrolments.length;
    }
  }, {
    key: 'hasExperiments',
    value: function hasExperiments() {
      return Array.isArray(this.data.experiments) && this.data.experiments.length;
    }
  }, {
    key: 'enrolments',
    value: function enrolments() {
      if (!this.hasEnrolments()) return 'none';

      return this.data.enrolments.filter(function (_ref) {
        var experiment = _ref.experiment,
            group = _ref.group;
        return experiment && group;
      }).map(function (_ref2) {
        var experiment = _ref2.experiment,
            group = _ref2.group;
        return experiment + '=' + group;
      }).join(',');
    }
  }, {
    key: 'experimentID',
    value: function experimentID() {
      return this.hasExperiments() ? this.data.experiments[0].experiment : 'none';
    }
  }, {
    key: 'experimentVariant',
    value: function experimentVariant() {
      return this.hasExperiments() ? this.data.experiments[0].group : 'none';
    }
  }]);

  return Experiments;
}();

exports.default = Experiments;