'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var GADimensionMappings = {
  userType: 'dimension1',
  joinedDate: 'dimension2',
  onboardedDate: 'dimension3',
  experimentID: 'dimension4',
  experimentVariant: 'dimension5',
  productType: 'dimension6',
  browserViewPort: 'dimension7',
  language: 'dimension10',
  rawSearchQuery: 'dimension11',
  artistUploadsGroup: 'dimension13',
  artistSalesGroup: 'dimension14',
  searchUUID: 'dimension16',
  federatedID: 'dimension20',
  colonExperimentBucket: 'dimension23',
  searchPageType: 'dimension23',
  searchResultCount: 'dimension24',
  recommendationUUID: 'dimension25',
  searchPagePreviewSize: 'dimension27',
  searchPagePreviewType: 'dimension28',
  pageVersion: 'dimension31'
};

var CustomDimensionsStore = function () {
  function CustomDimensionsStore(dimensions) {
    _classCallCheck(this, CustomDimensionsStore);

    this.data = dimensions || {};
  }

  _createClass(CustomDimensionsStore, [{
    key: 'validate',
    value: function validate() {
      if (!Object.keys(this.data).length) return null;

      // eslint-disable-next-line no-restricted-syntax
      for (var key in this.data) {
        // eslint-disable-next-line no-prototype-builtins
        if (this.data.hasOwnProperty(key)) {
          var dimensionName = GADimensionMappings[key];
          var dimensionValue = this.data[key];

          if (!dimensionName) {
            return new Error('"' + key + '" is not in the allowed list of "' + Object.keys(GADimensionMappings).join(', ') + '"');
          } else if (typeof dimensionValue !== 'string') {
            return new Error('value of "' + key + '" must be a string');
          }
        }
      }
      return null;
    }
  }, {
    key: 'toDimensions',
    value: function toDimensions() {
      var _this = this;

      if (!this.data) return {};

      return Object.keys(this.data).reduce(function (prev, cur) {
        // eslint-disable-next-line no-param-reassign
        prev[GADimensionMappings[cur]] = _this.data[cur];
        return prev;
      }, {});
    }
  }]);

  return CustomDimensionsStore;
}();

exports.default = CustomDimensionsStore;